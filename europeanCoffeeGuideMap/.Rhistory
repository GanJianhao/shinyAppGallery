lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
euroCoffee[euroCoffee$id == "ect_274",]
rm(list=ls())
euroCoffee <- read.csv("data/eurocoffeetrip_cafes_orig.csv", stringsAsFactors = F)
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274"  # Brussels: Belga & Co
)
euroCoffee <- subset(euroCoffee, !(id %in% excluded))
euroCoffee$href[euroCoffee$id == "ect_96"] <- "https://europeancoffeetrip.com/cafe/roststatte-berlin/"
for( cI in 1:NROW(euroCoffee)){
# set url
tmp_cafe_url <- euroCoffee$href[[cI]]
#////////////////////////////////////////////
# scape address
tmp_address <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".cafe-address-content") %>%
html_text(trim = T)
# multistep cleaning
edit_tmp_address <- gsub("[\n]", "", tmp_address) # clear \n
edit_tmp_address_1 <- gsub("[\r]", ", ", edit_tmp_address) # assign \r as comma
edit_tmp_address_2 <- gsub(", +", ", ", edit_tmp_address_1) # collapse
edit_tmp_address_3 <- gsub("\\+,", ",", edit_tmp_address_2) # recode comma
#////////////////////////////////////////////
# scrape coordinates
js_code <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".single-cafe-info script") %>%
html_text()
js_code_ext <- js_code[[1]]
# extract and clean longitude
long_js_ext <- substr(js_code_ext,
regexpr("longitude", js_code_ext) + 0,
regexpr("longitude", js_code_ext) + 30)
long_edit_1 <- gsub("longitude \\= ", "", long_js_ext)
long_edit_2 <- gsub("[;\r\n\\+ ]", "", long_edit_1)
long <- long_edit_2
# extract and clean latitude
lat_js_ext <- substr(js_code_ext,
regexpr("latitude", js_code_ext) + 0,
regexpr("latitude", js_code_ext) + 30)
lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
euroCoffee[euroCoffee$id == "ect_284",]
rm(list=ls())
euroCoffee <- read.csv("data/eurocoffeetrip_cafes_orig.csv", stringsAsFactors = F)
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274", # Brussels: Belga & Co
"ect_284"  # Gent: Bidon Coffee & Bicycle
)
euroCoffee <- subset(euroCoffee, !(id %in% excluded))
euroCoffee$href[euroCoffee$id == "ect_96"] <- "https://europeancoffeetrip.com/cafe/roststatte-berlin/"
for( cI in 1:NROW(euroCoffee)){
# set url
tmp_cafe_url <- euroCoffee$href[[cI]]
#////////////////////////////////////////////
# scape address
tmp_address <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".cafe-address-content") %>%
html_text(trim = T)
# multistep cleaning
edit_tmp_address <- gsub("[\n]", "", tmp_address) # clear \n
edit_tmp_address_1 <- gsub("[\r]", ", ", edit_tmp_address) # assign \r as comma
edit_tmp_address_2 <- gsub(", +", ", ", edit_tmp_address_1) # collapse
edit_tmp_address_3 <- gsub("\\+,", ",", edit_tmp_address_2) # recode comma
#////////////////////////////////////////////
# scrape coordinates
js_code <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".single-cafe-info script") %>%
html_text()
js_code_ext <- js_code[[1]]
# extract and clean longitude
long_js_ext <- substr(js_code_ext,
regexpr("longitude", js_code_ext) + 0,
regexpr("longitude", js_code_ext) + 30)
long_edit_1 <- gsub("longitude \\= ", "", long_js_ext)
long_edit_2 <- gsub("[;\r\n\\+ ]", "", long_edit_1)
long <- long_edit_2
# extract and clean latitude
lat_js_ext <- substr(js_code_ext,
regexpr("latitude", js_code_ext) + 0,
regexpr("latitude", js_code_ext) + 30)
lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
euroCoffee[euroCoffee$id == "ect_340",]
rm(list=ls())
euroCoffee <- read.csv("data/eurocoffeetrip_cafes_orig.csv", stringsAsFactors = F)
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274", # Brussels: Belga & Co
"ect_284", # Gent: Bidon Coffee & Bicycle
"ect_340"  # Stockholm: Johan & Nystrom
)
euroCoffee <- subset(euroCoffee, !(id %in% excluded))
euroCoffee$href[euroCoffee$id == "ect_96"] <- "https://europeancoffeetrip.com/cafe/roststatte-berlin/"
for( cI in 1:NROW(euroCoffee)){
# set url
tmp_cafe_url <- euroCoffee$href[[cI]]
#////////////////////////////////////////////
# scape address
tmp_address <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".cafe-address-content") %>%
html_text(trim = T)
# multistep cleaning
edit_tmp_address <- gsub("[\n]", "", tmp_address) # clear \n
edit_tmp_address_1 <- gsub("[\r]", ", ", edit_tmp_address) # assign \r as comma
edit_tmp_address_2 <- gsub(", +", ", ", edit_tmp_address_1) # collapse
edit_tmp_address_3 <- gsub("\\+,", ",", edit_tmp_address_2) # recode comma
#////////////////////////////////////////////
# scrape coordinates
js_code <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".single-cafe-info script") %>%
html_text()
js_code_ext <- js_code[[1]]
# extract and clean longitude
long_js_ext <- substr(js_code_ext,
regexpr("longitude", js_code_ext) + 0,
regexpr("longitude", js_code_ext) + 30)
long_edit_1 <- gsub("longitude \\= ", "", long_js_ext)
long_edit_2 <- gsub("[;\r\n\\+ ]", "", long_edit_1)
long <- long_edit_2
# extract and clean latitude
lat_js_ext <- substr(js_code_ext,
regexpr("latitude", js_code_ext) + 0,
regexpr("latitude", js_code_ext) + 30)
lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
euroCoffee[euroCoffee$id == "ect_377",]
rm(list=ls())
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274", # Brussels: Belga & Co
"ect_284", # Gent: Bidon Coffee & Bicycle
"ect_340", # Stockholm: Johan & Nystrom
"ect_377"  # Helsinki: Johan & Nystrom
)
euroCoffee <- read.csv("data/eurocoffeetrip_cafes_orig.csv", stringsAsFactors = F)
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274", # Brussels: Belga & Co
"ect_284", # Gent: Bidon Coffee & Bicycle
"ect_340", # Stockholm: Johan & Nystrom
"ect_377"  # Helsinki: Johan & Nystrom
)
euroCoffee <- subset(euroCoffee, !(id %in% excluded))
euroCoffee$href[euroCoffee$id == "ect_96"] <- "https://europeancoffeetrip.com/cafe/roststatte-berlin/"
for( cI in 1:NROW(euroCoffee)){
# set url
tmp_cafe_url <- euroCoffee$href[[cI]]
#////////////////////////////////////////////
# scape address
tmp_address <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".cafe-address-content") %>%
html_text(trim = T)
# multistep cleaning
edit_tmp_address <- gsub("[\n]", "", tmp_address) # clear \n
edit_tmp_address_1 <- gsub("[\r]", ", ", edit_tmp_address) # assign \r as comma
edit_tmp_address_2 <- gsub(", +", ", ", edit_tmp_address_1) # collapse
edit_tmp_address_3 <- gsub("\\+,", ",", edit_tmp_address_2) # recode comma
#////////////////////////////////////////////
# scrape coordinates
js_code <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".single-cafe-info script") %>%
html_text()
js_code_ext <- js_code[[1]]
# extract and clean longitude
long_js_ext <- substr(js_code_ext,
regexpr("longitude", js_code_ext) + 0,
regexpr("longitude", js_code_ext) + 30)
long_edit_1 <- gsub("longitude \\= ", "", long_js_ext)
long_edit_2 <- gsub("[;\r\n\\+ ]", "", long_edit_1)
long <- long_edit_2
# extract and clean latitude
lat_js_ext <- substr(js_code_ext,
regexpr("latitude", js_code_ext) + 0,
regexpr("latitude", js_code_ext) + 30)
lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
euroCoffee[euroCoffee$id == "ect_462",]
rm(list=ls())
euroCoffee <- read.csv("data/eurocoffeetrip_cafes_orig.csv", stringsAsFactors = F)
excluded <- c(
"ect_30",  # London: Allpress Espresso Roastery & Cafe
"ect_44",  # London: Ben's House
"ect_45",  # London: Bernstein's
"ect_84",  # Edinburgh: Williams and Johnson Coffee Co.
"ect_172", # Prague: Kavarna Co Hleda Jmeno
"ect_274", # Brussels: Belga & Co
"ect_284", # Gent: Bidon Coffee & Bicycle
"ect_340", # Stockholm: Johan & Nystrom
"ect_377"  # Helsinki: Johan & Nystrom
)
euroCoffee <- subset(euroCoffee, !(id %in% excluded))
euroCoffee$href[euroCoffee$id == "ect_96"] <- "https://europeancoffeetrip.com/cafe/roststatte-berlin/"
euroCoffee$href[euroCoffee$id == "ect_462"] <- "https://europeancoffeetrip.com/cafe/BjornEspressoBar-tallinn/"
for( cI in 1:NROW(euroCoffee)){
# set url
tmp_cafe_url <- euroCoffee$href[[cI]]
#////////////////////////////////////////////
# scape address
tmp_address <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".cafe-address-content") %>%
html_text(trim = T)
# multistep cleaning
edit_tmp_address <- gsub("[\n]", "", tmp_address) # clear \n
edit_tmp_address_1 <- gsub("[\r]", ", ", edit_tmp_address) # assign \r as comma
edit_tmp_address_2 <- gsub(", +", ", ", edit_tmp_address_1) # collapse
edit_tmp_address_3 <- gsub("\\+,", ",", edit_tmp_address_2) # recode comma
#////////////////////////////////////////////
# scrape coordinates
js_code <- read_html(tmp_cafe_url, encoding = "utf8") %>%
html_nodes(".single-cafe-info script") %>%
html_text()
js_code_ext <- js_code[[1]]
# extract and clean longitude
long_js_ext <- substr(js_code_ext,
regexpr("longitude", js_code_ext) + 0,
regexpr("longitude", js_code_ext) + 30)
long_edit_1 <- gsub("longitude \\= ", "", long_js_ext)
long_edit_2 <- gsub("[;\r\n\\+ ]", "", long_edit_1)
long <- long_edit_2
# extract and clean latitude
lat_js_ext <- substr(js_code_ext,
regexpr("latitude", js_code_ext) + 0,
regexpr("latitude", js_code_ext) + 30)
lat_edit_1 <- gsub("latitude \\= ", "", lat_js_ext)
lat_edit_2 <- gsub("[;\r\n\\+ ]", "", lat_edit_1)
lat <- lat_edit_2
#////////////////////////////////////////////
# assign to df
euroCoffee$address[cI] <- edit_tmp_address_3
euroCoffee$long[cI] <- as.numeric(long)
euroCoffee$lat[cI] <- as.numeric(lat)
#////////////////////////////////////////////
# print complete msg
message(paste0("Complete cafe ", cI, " of ", NROW(euroCoffee), " (",euroCoffee$id[[cI]],")"))
}
summary(euroCoffee)
euroCoffee$lat
euroCoffee$long
euroCoffee$address
write.csv(euroCoffee, "~/Desktop/europeancoffeetrip_cafes_MASTER.csv", row.names = F)
library(shiny)
ui <- tagList(
# call headers
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div("European Coffee Trip Cafe Explorer", class="jumbotron")
)
)
server <- function(input, output, session){
}
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style("html, body{padding: 0; margin: 0; max-with: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div("European Coffee Trip Cafe Explorer", class="jumbotron")
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
ls()
NROW(euroCoffee)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style("html, body{padding: 0; margin: 0; max-with: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style("html, body{padding: 0; margin: 0; max-with: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer", class="text-primary"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style("html, body{padding: 0; margin: 0; max-with: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer", class="primary"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style("html, body{padding: 0; margin: 0; width: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer", class="primary"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style(type="text/css", "html, body{padding: 0; margin: 0; width: 100%}"),
# ui
fluidPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer", class="primary"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
library(shiny)
# ui
ui <- tagList(
# call headers
tags$style(type="text/css", "html, body{padding: 0; margin: 0; width: 100%}"),
# ui
navbarPage(
#title
title = "European Coffee Trip Cafes",
div(class="jumbotron",
h1("European Coffee Trip Cafe Explorer", class="primary"),
p("Interactive Map of 468 Cafes across Europe")
)
)
)
# server
server <- function(input, output, session){
}
# app
shinyApp(ui, server)
runApp('coffeeapp.R')
dir("~/Desktop/")
system("mv ~/Desktop/europeancoffeetrip_cafes_MASTER.csv ~/Rstudio/data/")
dir()
dir("data")
library(shiny); runApp('coffeeapp.R')
euroCoffee <- read.csv("data/europeancoffeetrip_cafes_MASTER.csv", stringsAsFactors = F)
names(euroCoffee)
runApp('coffeeapp.R')
leaflet(data = euroCoffee) %>%
# set default view
setView(lng = 4.2346672,lat = 55.396824, zoom=4) %>%
# add theme
addProviderTiles("Stamen.Watercolor") %>%
addTiles(options = providerTileOptions(opacity = 0.75)) #%>%
# add markers
addMarkers(lng = ~long,
lat = ~lat)
runApp('coffeeapp.R')
head(euroCoffee)
runApp('coffeeapp.R')
library(shiny); runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
runApp('coffeeapp.R')
library(shiny); runApp('coffeeapp.R')
runApp('~/Dropbox/Programming/R/R_Shiny/EU_Coffee_Map')
runApp('~/Dropbox/Programming/R/R_Shiny/EU_Coffee_Map')
setwd("~/Dropbox/Programming/R/R_Shiny/EU_Coffee_Map/")
getwd()
dir(recursive = T)
file.rename(from="www/css/Untitled.R", to = "www/css/app.css")
dir(recursive = T)
file.edit("www/css/app.css")
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
