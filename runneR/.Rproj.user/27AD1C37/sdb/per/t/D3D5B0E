{
    "collab_server" : "",
    "contents" : "# pkgs\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(highcharter)\n\n# functions\nsaveData <- function(data) {\n    \n    # logic\n    if (exists(\"responses\")) {\n        responses <<- rbind(responses, data)\n        saveRDS(responses,file=\"responses/runningData.RDS\")\n        \n    } else {\n        responses <<- data\n        saveRDS(responses,file=\"responses/runningData.RDS\")\n    }\n}\n\nloadData <- function() {\n    responses <<- readRDS(\"responses/runningData.RDS\")\n}\n\n# ui\nui <- tagList(\n    shinyjs::useShinyjs(),\n    # head\n    tags$head(\n        tags$meta(charset=\"UTF-8\"),\n        tags$meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\"),\n        tags$link(rel=\"stylesheet\", type=\"text/css\", href=\"css/app.css\")\n    ),\n    # body\n    tags$body(\n        tags$div(\n            class=\"wrapper\",\n            tags$div(\n                class=\"header\",\n                tags$div(\n                    class=\"grid-box\",\n                    actionButton(inputId = \"menuBtnOpen\",label=\"+\"),\n                    actionButton(inputId = \"menuBtnClose\",label=\"-\")\n                ),\n                tags$div(class=\"grid-box\",h4(\"My Running Progress\"))\n            ),\n            tags$div(\n                id=\"overlay-content-wrapper\",\n                tags$div(\n                    class=\"overlay-content\",\n                    h2(\"Monitor my progress\"),\n                    tags$div(id=\"plot-chooser-container\",\n                             tags$div(class=\"p-box\",tags$p(\"Days\")),\n                             tags$label(class=\"switch\",\n                                        tags$input(type=\"checkbox\",id=\"chartToggle\",\n                                                   tags$span(class=\"slider round\")\n                                        )\n                             ),\n                             tags$div(class=\"p-box\",tags$p(\"Distance\"))\n                    ),\n                    tags$div(\n                        id=\"plot-container\",\n                        p(id=\"plot-context\"),\n                        highchartOutput(\"chart\")\n                    )\n                )\n            ),\n            tags$div(\n                class=\"container\",\n                tags$div(\n                    class=\"content\",\n                    tags$div(\n                        id=\"input-fields\",\n                        # input\n                        h1(\"Did you run today?\", id=\"question\"),\n                        tags$div(\n                            class=\"btn-container\",\n                            actionButton(inputId = \"btnNo\",\n                                         class=\"button\",label = \"No\"),\n                            actionButton(inputId = \"btnYes\",\n                                         class=\"button\",label = \"Yes\")\n                        )\n                    ),\n                    # reply\n                    tags$div(\n                        id=\"inner-content\",\n                        tags$div(\n                            id=\"container-yes\",\n                            h1(\"How far did you run today?\"),\n                            p(\"(In kms, please)\"),\n                            tags$div(\n                                class=\"input-container\",\n                                numericInput(inputId = \"dist\", \n                                             label=NULL, \n                                             value=0,\n                                             step=0.1,\n                                             min=0, \n                                             max=50),\n                                actionButton(inputId = \"btnSubmit\",\n                                             label=\"Submit\",\n                                             class=\"button\")\n                            )\n                        ),\n                        tags$div(\n                            id=\"container-complete\",\n                            tags$h3(id=\"reply-message\"),\n                            tags$div(\n                                class=\"btn-container\",\n                                actionButton(inputId = \"btnQuit\",class=\"button\",\n                                             label = \"See you later!\")\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n\n# server\nserver <- shinyServer(function(input,output,session){\n    \n    # app defaults\n    shinyjs::hide(id=\"overlay-content-wrapper\")\n    shinyjs::hide(id=\"inner-content\")\n    shinyjs::hide(id=\"menuBtnClose\")\n    \n    # load data\n    loadData()\n    \n    # logic if Sys.Date() == max date in responses, don't display choices\n    if(exists(\"responses\")){\n        if(max(responses$date) == format(Sys.Date(),\"%Y-%m-%d\")){\n            shinyjs::hide(id=\"input-fields\")\n            shinyjs::show(id=\"inner-content\")\n            shinyjs::hide(id=\"container-yes\")\n            shinyjs::html(id=\"reply-message\",\n                          html=\"Looks like you've already logged for the day. Enjoy the rest of the day.\")\n        }\n    }\n    \n    observeEvent(input$btnNo,{\n        # display message\n        shinyjs::hide(id=\"input-fields\")\n        shinyjs::show(id=\"inner-content\")\n        shinyjs::hide(id=\"container-yes\")\n        shinyjs::show(id=\"container-complete\")\n        shinyjs::html(id=\"reply-message\",html = \"You deserve a day to rest your legs. Remember to stretch!\")\n        \n        # make df\n        inputDF <- data.frame(\n            \"date\" = format(Sys.Date(),\"%Y-%m-%d\"),\n            \"status\" = \"no\",\n            \"distance\" = 0,\n            stringsAsFactors = F\n        )\n        # save\n        saveData(inputDF)\n    })\n    \n    observeEvent(input$btnYes,{\n        # hide divs\n        shinyjs::hide(id=\"input-fields\")\n        shinyjs::show(id=\"inner-content\")\n        shinyjs::show(id=\"container-yes\")\n        shinyjs::hide(id=\"container-complete\")\n        \n        # show second question div\n        observeEvent(input$btnSubmit,{\n            \n            # show/hide\n            shinyjs::hide(id=\"container-yes\")\n            shinyjs::show(id=\"container-complete\")\n            shinyjs::html(id=\"reply-message\",html = \"Excellent! Keep up the good work. Remember to stretch!\")\n            \n            # make df\n            inputDF <- data.frame(\n                \"date\" = format(Sys.Date(),\"%Y-%m-%d\"),\n                \"status\" = \"yes\",\n                \"distance\" = as.numeric(input$dist),\n                stringsAsFactors = F\n            )\n            # save\n            saveData(inputDF)\n        })\n    })\n    \n    observeEvent(input$menuBtnOpen,{\n        \n        # overlay defaults\n        shinyjs::hide(id=\"menuBtnOpen\")\n        shinyjs::show(id=\"menuBtnClose\")\n        shinyjs::show(id=\"overlay-content-wrapper\", anim = T, animType = \"slide\", time =0.8)\n        \n        # summarise data for days plot: days run and off days\n        daysRun <- responses %>% \n            group_by(\"yyyy_mm\" = format(as.Date(date), \"%Y-%m-01\")) %>% \n            filter(status == \"yes\") %>% \n            count()\n        daysRunNo <- responses %>% \n            group_by(\"yyyy_mm\" = format(as.Date(date), \"%Y-%m-01\")) %>% \n            filter(status == \"no\") %>% \n            count()\n        \n        # plot:days\n        daysPlot <- highchart() %>%\n            hc_chart(type = \"line\", zoomType = \"xy\") %>%\n            hc_xAxis(categories = format(as.POSIXct(daysRun$yyyy_mm), \"%b %Y\")) %>%\n            hc_yAxis(title=list(text=\"number of days\")) %>%\n            hc_add_series(daysRun$n, name=\"Days ran\", color=\"#2D7DD2\") %>%\n            hc_add_series(daysRunNo$n, name=\"Rest days\", color=\"#F45D01\") %>%\n            hc_tooltip(crosshairs = TRUE,headerFormat = \"\", shared = FALSE)\n        \n        # plot: distance\n        runDF <- responses %>% filter(status == \"yes\")\n        \n        distPlot <- highchart() %>%\n            hc_chart(zoomType = \"xy\") %>%\n            hc_xAxis(type=\"dateTime\",\n                     categories = format(as.POSIXct(runDF$date), \"%b %d\")) %>%\n            hc_yAxis(title=list(text=\"kms\")) %>%\n            hc_add_series(type=\"scatter\", \n                          data =runDF$distance,\n                          marker=list(symbol=\"circle\",\n                                      lineWidth=\"1px\",\n                                      fillColor=\"rgba(4,167,119,0.3)\",\n                                      lineColor=\"#04A777\"),\n                          backgroundColor=\"white\",\n                          color=\"#04A777\",\n                          name=\"Distance\") %>%\n            hc_add_series(type=\"line\",round(lowess(runDF$distance)$y,2),\n                          marker=F,\n                          shadow=T,\n                          lineWidth=\"1px\",\n                          color=\"#636363\",\n                          name=\"Trend\") %>%\n            hc_tooltip(crosshairs = TRUE,\n                       shared = FALSE,\n                       headerFormat = \"{point.x}<br>\",\n                       pointFormat=\"{point.y} kms\",\n                       shadow=T,\n                       backgroundColor=\"white\",\n                       padding=12,\n                       borderWidth=1.5,\n                       borderRadius=10)\n        \n        # watch toggle: default is days; bx will modify txt and plot output\n        observe({\n            # default = days\n            if(input$chartToggle == F){\n                shinyjs::html(id=\"plot-context\",\"Here's a monthly summary of how many days you've ran vs how many off days\")\n                output$chart <- renderHighchart({daysPlot})\n            }\n            # 'on' = distance\n            if(input$chartToggle == T){\n                shinyjs:: html(id=\"plot-context\",\"Here's a day-by-day look at how far you've run\")\n                output$chart <- renderHighchart({distPlot}) \n            }\n        })\n    })\n    \n    # menu btn actions\n    observeEvent(input$menuBtnClose,{\n        shinyjs::hide(id=\"menuBtnClose\")\n        shinyjs::show(id=\"menuBtnOpen\")\n        shinyjs::hide(id=\"overlay-content-wrapper\",anim = TRUE,animType =\"slide\",time = 0.8)\n    })\n    \n    # on btn quit\n    observeEvent(input$btnQuit,{stopApp()})\n    \n})\n\n# deploy\nshinyApp(ui,server)",
    "created" : 1507204852866.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "640005930",
    "id" : "D3D5B0E",
    "lastKnownWriteTime" : 1507530990,
    "last_content_update" : 1507530990,
    "path" : "~/Github/shinyapps/runneR/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}